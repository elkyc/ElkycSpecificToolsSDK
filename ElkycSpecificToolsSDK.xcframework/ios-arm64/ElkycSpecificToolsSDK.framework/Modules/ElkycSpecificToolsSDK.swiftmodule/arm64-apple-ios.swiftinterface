// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ElkycSpecificToolsSDK
import ElkycCoreSDK
@_exported import ElkycSpecificToolsSDK
import Foundation
import Swift
import UIKit
import _Concurrency
public protocol NibView {
  var internalView: UIKit.UIView! { get }
  func loadViewFromNib()
}
extension ElkycSpecificToolsSDK.NibView where Self : UIKit.UIView {
  public var internalView: UIKit.UIView! {
    get
  }
  public func loadViewFromNib()
}
extension UIKit.UIImage {
  public func withColor(_ color: UIKit.UIColor) -> UIKit.UIImage
}
public class OTPStep : ElkycCoreSDK.ElkycStep {
  public var stepId: ElkycCoreSDK.ElkycStepId
  public struct Response {
    public let type: ElkycSpecificToolsSDK.OTPMode
    public let value: Swift.String
    public let code: Swift.String
  }
  public init(visibility: ElkycSpecificToolsSDK.OTPVisibility = .both)
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycSpecificToolsSDK.OTPStep.Response, Swift.Error>) -> Swift.Void))
  public typealias Output = ElkycSpecificToolsSDK.OTPStep.Response
  @objc deinit
}
public struct OTPDemo {
  public static func otpDemoViewController(completion: @escaping ((Swift.Result<ElkycSpecificToolsSDK.OTPStep.Response, Swift.Error>) -> Swift.Void)) throws -> UIKit.UIViewController
}
public class Diia : ElkycCoreSDK.ElkycStep {
  public var stepId: ElkycCoreSDK.ElkycStepId
  public init(config: ElkycSpecificToolsSDK.Diia.Config = Config())
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<UIKit.UIImage?, Swift.Error>) -> Swift.Void))
  public typealias Output = Swift.Optional<UIKit.UIImage>
  @objc deinit
}
extension ElkycSpecificToolsSDK.Diia {
  public struct Config {
    public struct Intro {
      public var title: Swift.String
      public var description: Swift.String
      public var mainBtnBackgroundColor: UIKit.UIColor
      public var mainBtnTintColor: UIKit.UIColor
      public var mainBtnTitle: Swift.String
    }
    public struct Result {
      public var successTitle: Swift.String
      public var failTitle: Swift.String
      public var failDescription: Swift.String
      public var mainBtnBackgroundColor: UIKit.UIColor
      public var mainBtnTintColor: UIKit.UIColor
      public var mainBtnTitleSuccess: Swift.String
      public var mainBtnTitleFail: Swift.String
    }
    public var intro: ElkycSpecificToolsSDK.Diia.Config.Intro
    public var result: ElkycSpecificToolsSDK.Diia.Config.Result
    public init()
  }
}
public enum OTPMode {
  case phone
  case email
  public static func == (a: ElkycSpecificToolsSDK.OTPMode, b: ElkycSpecificToolsSDK.OTPMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum OTPVisibility {
  case phone
  case email
  case both
  public static func == (a: ElkycSpecificToolsSDK.OTPVisibility, b: ElkycSpecificToolsSDK.OTPVisibility) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class UIKitSelfieWithConfirm : ElkycCoreSDK.ElkycStep {
  public var stepId: ElkycCoreSDK.ElkycStepId
  public init()
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycSpecificToolsSDK.UIKitSelfieWithConfirm.StepResult, Swift.Error>) -> Swift.Void))
  public typealias Output = ElkycSpecificToolsSDK.UIKitSelfieWithConfirm.StepResult
  @objc deinit
}
extension ElkycSpecificToolsSDK.UIKitSelfieWithConfirm {
  public struct StepResult {
    public let image: UIKit.UIImage
    public let confirmResult: ElkycCoreSDK.DocumentConfirm.StepResult
  }
}
public class SignaturePad : ElkycCoreSDK.ElkycStep {
  public var stepId: ElkycCoreSDK.ElkycStepId
  public init(config: ElkycSpecificToolsSDK.SignaturePad.Config = Config())
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<UIKit.UIImage, Swift.Error>) -> Swift.Void))
  public typealias Output = UIKit.UIImage
  @objc deinit
}
extension ElkycSpecificToolsSDK.SignaturePad {
  public struct Config {
    public init()
  }
}
extension ElkycSpecificToolsSDK.OTPMode : Swift.Equatable {}
extension ElkycSpecificToolsSDK.OTPMode : Swift.Hashable {}
extension ElkycSpecificToolsSDK.OTPVisibility : Swift.Equatable {}
extension ElkycSpecificToolsSDK.OTPVisibility : Swift.Hashable {}
